const minGridCol = 2, maxGridCol = window.innerWidth > 768 ? 12 : 6, minGridGap = 5, maxGridGap = 100, body = document.querySelector("body"), styles = { gridContainer: `position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        pointer-events: none;\n        display: grid;\n        grid-template-columns: repeat(${maxGridCol}, 1fr);\n        grid-template-rows: 100vh;\n        grid-gap: 30px;`, gridColumn: "opacity: 0.2;\n        background-color: #000000;", gridInfos: "position: fixed;\n        top: 50%;\n        right: 0;\n        transform: translateY(-50%);\n        color: white;\n        background-color: rgba(0, 0, 0, 0.5);\n        padding: 15px;\n        pointer-events: none;\n        z-index: 99999;", gridInfosItem: "display: flex;\n        line-height: 1.5", gridInfosProperty: "width: 90px;" }; var isEditable = !1; function gridHelper(e) { switch (e.preventDefault(), e.key) { case "g": appendGridHelper(), appendGridInfos(); break; case "Escape": destroyElement(".grid"), destroyElement(".gridInfos"); break; case "ArrowLeft": reduceGuttersWidth(); break; case "ArrowRight": increaseGuttersWidth(); break; case "ArrowDown": reduceGridColumns(); break; case "ArrowUp": increaseGridColumns(); break; default: console.log("No action found for this keyboard key.") } } function appendGridHelper() { if (!document.body.contains(document.querySelector(".grid"))) { isEditable = !0; var e = document.createElement("div"); e.classList.add("grid"), e.style = styles.gridContainer; for (var t = 0; t < maxGridCol; t++) { var r = document.createElement("div"); r.classList.add("grid__col"), r.style = styles.gridColumn, e.appendChild(r) } return body.appendChild(e), isEditable } } function appendGridInfos() { if (!document.body.contains(document.querySelector(".gridInfos"))) { var e = document.createElement("div"); e.classList.add("gridInfos"), e.style = styles.gridInfos, (r = document.createElement("div")).classList.add("gridInfos__item"), r.style = styles.gridInfosItem; var t = document.createElement("span"); t.classList.add("gridInfos__property__columns"), t.style = styles.gridInfosProperty, t.innerHTML = "Columns :"; var r, n = document.createElement("span"); n.classList.add("gridInfos__number__columns"), n.innerHTML = maxGridCol, r.appendChild(t), r.appendChild(n), e.appendChild(r), (r = document.createElement("div")).classList.add("gridInfos__item"), r.style = styles.gridInfosItem; var i = document.createElement("span"); i.classList.add("gridInfos__property__gutters"), i.style = styles.gridInfosProperty, i.innerHTML = "Gutters :"; var d = document.createElement("span"); d.classList.add("gridInfos__number__gutters"), d.innerHTML = "30px", r.appendChild(i), r.appendChild(d), e.appendChild(r), body.appendChild(e) } } function destroyElement(e) { isEditable && (document.body.contains(document.querySelector(e)) && (e = document.querySelector(e)).remove()) } function reduceGuttersWidth() { if (isEditable && document.body.contains(document.querySelector(".grid"))) { var e = document.querySelector(".grid"), t = window.getComputedStyle(e).getPropertyValue("grid-gap"), r = document.querySelector(".gridInfos__number__gutters"); (t = parseInt(t)) > minGridGap ? (t -= 5, e.style.gridGap = t + "px", r.textContent = t + "px") : (limitGrid("gutters"), setTimeout(function () { initStyleGrid("gutters") }, 500)) } } function increaseGuttersWidth() { if (isEditable && document.body.contains(document.querySelector(".grid"))) { var e = document.querySelector(".grid"), t = window.getComputedStyle(e).getPropertyValue("grid-gap"), r = document.querySelector(".gridInfos__number__gutters"); (t = parseInt(t)) < maxGridGap ? (t += 5, e.style.gridGap = t + "px", r.textContent = t + "px") : (limitGrid("gutters"), setTimeout(function () { initStyleGrid("gutters") }, 500)) } } function reduceGridColumns() { if (isEditable && document.body.contains(document.querySelector(".grid"))) { var e = document.querySelector(".grid"), t = document.querySelector(".gridInfos__number__columns"), r = document.querySelectorAll(".grid__col"), n = e.lastChild; (r = r.length) > minGridCol ? (e.removeChild(n), r -= 1, e.style.gridTemplateColumns = "repeat(" + r + ", 1fr)", t.textContent = r) : (limitGrid("columns"), setTimeout(function () { initStyleGrid("columns") }, 500)) } } function increaseGridColumns() { if (isEditable && document.body.contains(document.querySelector(".grid"))) { var e = document.querySelector(".grid"), t = document.querySelector(".gridInfos__number__columns"), r = document.querySelectorAll(".grid__col"); if ((r = r.length) < maxGridCol) { var n = document.createElement("div"); n.classList.add("grid__col"), n.style = styles.gridColumn, e.appendChild(n), r += 1, e.style.gridTemplateColumns = "repeat(" + r + ", 1fr)", t.textContent = r } else limitGrid("columns"), setTimeout(function () { initStyleGrid("columns") }, 500) } } function limitGrid(e) { if ("columns" == e) for (var t = document.querySelectorAll(".grid__col"), r = 0; r < t.length; r++)t[r].style.backgroundColor = "red"; else if ("gutters" == e) { document.querySelector(".grid").style.backgroundColor = "rgba(255,0,0,0.2)" } } function initStyleGrid(e) { if ("columns" == e) for (var t = document.querySelectorAll(".grid__col"), r = 0; r < t.length; r++)t[r].style.backgroundColor = "#000000"; else if ("gutters" == e) { document.querySelector(".grid").style.backgroundColor = "initial" } } window.addEventListener("keydown", gridHelper), navigator.userAgent.search("Safari") >= 0 && navigator.userAgent.search("Chrome") < 0 && alert("Grid-Utils not working in Safari. Please use another browser.");