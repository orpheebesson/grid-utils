const minGridCol = 2, maxGridCol = 12, minGridGap = 5, maxGridGap = 100, body = document.querySelector("body"), styles = { gridContainer: "position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        display: grid;\n        grid-template-columns: repeat(12, 1fr);\n        grid-template-rows: 100vh;\n        grid-gap: 30px;", gridColumn: "opacity: 0.15;\n        background-color: #000000;", gridInfos: "position: fixed;\n        top: 50%;\n        right: 0;\n        transform: translateY(-50%);\n        color: white;\n        background-color: rgba(0, 0, 0, 0.5);\n        padding: 15px;\n        z-index: 99999;", gridInfosItem: "display: flex;\n        line-height: 1.5", gridInfosProperty: "width: 90px;" }; var isEditable = !1; function gridHelper(e) { switch (e.preventDefault(), e.key) { case "g": appendGridHelper(), appendGridInfos(); break; case "Escape": destroyGridHelper(), destroyGridInfos(); break; case "ArrowLeft": reduceGuttersWidth(); break; case "ArrowRight": increaseGuttersWidth(); break; case "ArrowDown": reduceGridColumns(); break; case "ArrowUp": increaseGridColumns(); break; default: console.log("No action found for this keyboard key.") } } function appendGridHelper() { isEditable = !0; var e = document.createElement("div"); e.classList.add("grid"), e.style = styles.gridContainer; for (var r = 0; r < maxGridCol; r++) { var t = document.createElement("div"); t.classList.add("grid__col"), t.style = styles.gridColumn, e.appendChild(t) } return body.appendChild(e), isEditable } function appendGridInfos() { var e = document.createElement("div"); e.classList.add("gridInfos"), e.style = styles.gridInfos, (t = document.createElement("div")).classList.add("gridInfos__item"), t.style = styles.gridInfosItem; var r = document.createElement("span"); r.classList.add("gridInfos__property__columns"), r.style = styles.gridInfosProperty, r.innerHTML = "Columns :"; var t, n = document.createElement("span"); n.classList.add("gridInfos__number__columns"), n.innerHTML = maxGridCol, t.appendChild(r), t.appendChild(n), e.appendChild(t), (t = document.createElement("div")).classList.add("gridInfos__item"), t.style = styles.gridInfosItem; var d = document.createElement("span"); d.classList.add("gridInfos__property__gutters"), d.style = styles.gridInfosProperty, d.innerHTML = "Gutters :"; var i = document.createElement("span"); i.classList.add("gridInfos__number__gutters"), i.innerHTML = "30px", t.appendChild(d), t.appendChild(i), e.appendChild(t), body.appendChild(e) } function destroyGridHelper() { isEditable && document.querySelector(".grid").remove() } function destroyGridInfos() { isEditable && document.querySelector(".gridInfos").remove() } function reduceGuttersWidth() { if (isEditable) { var e = document.querySelector(".grid"), r = window.getComputedStyle(e).getPropertyValue("grid-gap"), t = document.querySelector(".gridInfos__number__gutters"); (r = parseInt(r)) > minGridGap ? (r -= 5, e.style.gridGap = r + "px", t.textContent = r + "px") : alert("You have reached the minimum margins size.") } } function increaseGuttersWidth() { if (isEditable) { var e = document.querySelector(".grid"), r = window.getComputedStyle(e).getPropertyValue("grid-gap"), t = document.querySelector(".gridInfos__number__gutters"); (r = parseInt(r)) < maxGridGap ? (r += 5, e.style.gridGap = r + "px", t.textContent = r + "px") : alert("You have reached the maximum margins size.") } } function reduceGridColumns() { if (isEditable) { var e = document.querySelector(".grid"), r = document.querySelector(".gridInfos__number__columns"), t = document.querySelectorAll(".grid__col"), n = e.lastChild; (t = t.length) > minGridCol ? (e.removeChild(n), t -= 1, e.style.gridTemplateColumns = "repeat(" + t + ", 1fr)", r.textContent = t) : alert("You have reached the minimum number of columns.") } } function increaseGridColumns() { if (isEditable) { var e = document.querySelector(".grid"), r = document.querySelector(".gridInfos__number__columns"), t = document.querySelectorAll(".grid__col"); if ((t = t.length) < maxGridCol) { var n = document.createElement("div"); n.classList.add("grid__col"), n.style = styles.gridColumn, e.appendChild(n), t += 1, e.style.gridTemplateColumns = "repeat(" + t + ", 1fr)", r.textContent = t } else alert("You have reached the maximum number of columns.") } } window.addEventListener("keydown", gridHelper), navigator.userAgent.search("Safari") >= 0 && navigator.userAgent.search("Chrome") < 0 && alert("Grid-Utils not working in Safari. Please use another browser.");